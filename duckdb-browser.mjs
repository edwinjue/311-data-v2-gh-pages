var e,s,t,a,r,i=Object.create,n=Object.defineProperty,d=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,c=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty,l=(e=(e,s)=>{s.exports=Worker},()=>(s||e(s={exports:{}},s),s.exports)),_=((t=_||{})[t.UNDEFINED=0]="UNDEFINED",t[t.AUTOMATIC=1]="AUTOMATIC",t[t.READ_ONLY=2]="READ_ONLY",t[t.READ_WRITE=3]="READ_WRITE",t),u=((r=u||{})[r.NONE=0]="NONE",r[r.DEBUG=1]="DEBUG",r[r.INFO=2]="INFO",r[r.WARNING=3]="WARNING",r[r.ERROR=4]="ERROR",r),T=((a=T||{})[a.NONE=0]="NONE",a[a.CONNECT=1]="CONNECT",a[a.DISCONNECT=2]="DISCONNECT",a[a.OPEN=3]="OPEN",a[a.QUERY=4]="QUERY",a[a.INSTANTIATE=5]="INSTANTIATE",a),R=(e=>(e[e.NONE=0]="NONE",e[e.OK=1]="OK",e[e.ERROR=2]="ERROR",e[e.START=3]="START",e[e.RUN=4]="RUN",e[e.CAPTURE=5]="CAPTURE",e))(R||{}),p=(e=>(e[e.NONE=0]="NONE",e[e.WEB_WORKER=1]="WEB_WORKER",e[e.NODE_WORKER=2]="NODE_WORKER",e[e.BINDINGS=3]="BINDINGS",e[e.ASYNC_DUCKDB=4]="ASYNC_DUCKDB",e))(p||{}),h=class{log(e){}},I=class{constructor(e=2){this.level=e}log(e){e.level>=this.level&&console.log(e)}};function m(e){switch(e){case 0:return"NONE";case 1:return"DEBUG";case 2:return"INFO";case 3:return"WARNING";case 4:return"ERROR";default:return"?"}}function b(e){switch(e){case 0:return"NONE";case 1:return"OK";case 2:return"ERROR";case 3:return"START";case 4:return"RUN";case 5:return"CAPTURE";default:return"?"}}function S(e){switch(e){case 1:return"CONNECT";case 2:return"DISCONNECT";case 5:return"INSTANTIATE";case 3:return"OPEN";case 4:return"QUERY";default:return"?"}}function g(e){switch(e){case 0:return"NONE";case 1:return"WEB WORKER";case 2:return"NODE WORKER";case 3:return"DUCKDB BINDINGS";case 4:return"DUCKDB";default:return"?"}}var y=(e=>(e[e.SUCCESS=0]="SUCCESS",e))(y||{});import*as N from"apache-arrow";var k,w,O=class{constructor(e,s){this._bindings=e,this._conn=s}get bindings(){return this._bindings}async close(){return this._bindings.disconnect(this._conn)}useUnsafe(e){return e(this._bindings,this._conn)}async query(e){this._bindings.logger.log({timestamp:new Date,level:2,origin:4,topic:4,event:4,value:e});let s=await this._bindings.runQuery(this._conn,e),t=N.RecordBatchReader.from(s);return console.assert(t.isSync(),"Reader is not sync"),console.assert(t.isFile(),"Reader is not file"),new N.Table(t)}async send(e){this._bindings.logger.log({timestamp:new Date,level:2,origin:4,topic:4,event:4,value:e});let s=await this._bindings.startPendingQuery(this._conn,e);for(;null==s;)s=await this._bindings.pollPendingQuery(this._conn);let t=new F(this._bindings,this._conn,s),a=await N.RecordBatchReader.from(t);return console.assert(a.isAsync()),console.assert(a.isStream()),a}async cancelSent(){return await this._bindings.cancelPendingQuery(this._conn)}async getTableNames(e){return await this._bindings.getTableNames(this._conn,e)}async prepare(e){let s=await this._bindings.createPrepared(this._conn,e);return new A(this._bindings,this._conn,s)}async insertArrowTable(e,s){let t=N.tableToIPC(e,"stream");await this.insertArrowFromIPCStream(t,s)}async insertArrowFromIPCStream(e,s){await this._bindings.insertArrowFromIPCStream(this._conn,e,s)}async insertCSVFromPath(e,s){await this._bindings.insertCSVFromPath(this._conn,e,s)}async insertJSONFromPath(e,s){await this._bindings.insertJSONFromPath(this._conn,e,s)}},F=class{constructor(e,s,t){this.db=e,this.conn=s,this.header=t,this._first=!0,this._depleted=!1,this._inFlight=null}async next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let e;return null!=this._inFlight?(e=await this._inFlight,this._inFlight=null):e=await this.db.fetchQueryResults(this.conn),this._depleted=0==e.length,this._depleted||(this._inFlight=this.db.fetchQueryResults(this.conn)),{done:this._depleted,value:e}}[Symbol.asyncIterator](){return this}},A=class{constructor(e,s,t){this.bindings=e,this.connectionId=s,this.statementId=t}async close(){await this.bindings.closePrepared(this.connectionId,this.statementId)}async query(...e){let s=await this.bindings.runPrepared(this.connectionId,this.statementId,e),t=N.RecordBatchReader.from(s);return console.assert(t.isSync()),console.assert(t.isFile()),new N.Table(t)}async send(...e){let s=await this.bindings.sendPrepared(this.connectionId,this.statementId,e),t=new F(this.bindings,this.connectionId,s),a=await N.RecordBatchReader.from(t);return console.assert(a.isAsync()),console.assert(a.isStream()),a}},P=((w=P||{}).CANCEL_PENDING_QUERY="CANCEL_PENDING_QUERY",w.CLOSE_PREPARED="CLOSE_PREPARED",w.COLLECT_FILE_STATISTICS="COLLECT_FILE_STATISTICS",w.CONNECT="CONNECT",w.COPY_FILE_TO_BUFFER="COPY_FILE_TO_BUFFER",w.COPY_FILE_TO_PATH="COPY_FILE_TO_PATH",w.CREATE_PREPARED="CREATE_PREPARED",w.DISCONNECT="DISCONNECT",w.DROP_FILE="DROP_FILE",w.DROP_FILES="DROP_FILES",w.EXPORT_FILE_STATISTICS="EXPORT_FILE_STATISTICS",w.FETCH_QUERY_RESULTS="FETCH_QUERY_RESULTS",w.FLUSH_FILES="FLUSH_FILES",w.GET_FEATURE_FLAGS="GET_FEATURE_FLAGS",w.GET_TABLE_NAMES="GET_TABLE_NAMES",w.GET_VERSION="GET_VERSION",w.GLOB_FILE_INFOS="GLOB_FILE_INFOS",w.INSERT_ARROW_FROM_IPC_STREAM="INSERT_ARROW_FROM_IPC_STREAM",w.INSERT_CSV_FROM_PATH="IMPORT_CSV_FROM_PATH",w.INSERT_JSON_FROM_PATH="IMPORT_JSON_FROM_PATH",w.INSTANTIATE="INSTANTIATE",w.OPEN="OPEN",w.PING="PING",w.POLL_PENDING_QUERY="POLL_PENDING_QUERY",w.REGISTER_FILE_BUFFER="REGISTER_FILE_BUFFER",w.REGISTER_FILE_HANDLE="REGISTER_FILE_HANDLE",w.REGISTER_FILE_URL="REGISTER_FILE_URL",w.RESET="RESET",w.RUN_PREPARED="RUN_PREPARED",w.RUN_QUERY="RUN_QUERY",w.SEND_PREPARED="SEND_PREPARED",w.START_PENDING_QUERY="START_PENDING_QUERY",w.TOKENIZE="TOKENIZE",w),L=((k=L||{}).CONNECTION_INFO="CONNECTION_INFO",k.ERROR="ERROR",k.FEATURE_FLAGS="FEATURE_FLAGS",k.FILE_BUFFER="FILE_BUFFER",k.FILE_INFOS="FILE_INFOS",k.FILE_SIZE="FILE_SIZE",k.FILE_STATISTICS="FILE_STATISTICS",k.INSTANTIATE_PROGRESS="INSTANTIATE_PROGRESS",k.LOG="LOG",k.OK="OK",k.PREPARED_STATEMENT_ID="PREPARED_STATEMENT_ID",k.QUERY_PLAN="QUERY_PLAN",k.QUERY_RESULT="QUERY_RESULT",k.QUERY_RESULT_CHUNK="QUERY_RESULT_CHUNK",k.QUERY_RESULT_HEADER="QUERY_RESULT_HEADER",k.QUERY_RESULT_HEADER_OR_NULL="QUERY_RESULT_HEADER_OR_NULL",k.REGISTERED_FILE="REGISTERED_FILE",k.SCRIPT_TOKENS="SCRIPT_TOKENS",k.SUCCESS="SUCCESS",k.TABLE_NAMES="TABLE_NAMES",k.VERSION_STRING="VERSION_STRING",k),C=class{constructor(e,s){this.promiseResolver=()=>{},this.promiseRejecter=()=>{},this.type=e,this.data=s,this.promise=new Promise(((e,s)=>{this.promiseResolver=e,this.promiseRejecter=s}))}};import*as U from"apache-arrow";function f(e){switch(e.typeId){case U.Type.Binary:return{sqlType:"binary"};case U.Type.Bool:return{sqlType:"bool"};case U.Type.Date:return{sqlType:"date"};case U.Type.DateDay:return{sqlType:"date32[d]"};case U.Type.DateMillisecond:return{sqlType:"date64[ms]"};case U.Type.Decimal:{let s=e;return{sqlType:"decimal",precision:s.precision,scale:s.scale}}case U.Type.Float:return{sqlType:"float"};case U.Type.Float16:return{sqlType:"float16"};case U.Type.Float32:return{sqlType:"float32"};case U.Type.Float64:return{sqlType:"float64"};case U.Type.Int:return{sqlType:"int32"};case U.Type.Int16:return{sqlType:"int16"};case U.Type.Int32:return{sqlType:"int32"};case U.Type.Int64:return{sqlType:"int64"};case U.Type.Uint16:return{sqlType:"uint16"};case U.Type.Uint32:return{sqlType:"uint32"};case U.Type.Uint64:return{sqlType:"uint64"};case U.Type.Uint8:return{sqlType:"uint8"};case U.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case U.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case U.Type.List:return{sqlType:"list",valueType:f(e.valueType)};case U.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:e.byteWidth};case U.Type.Null:return{sqlType:"null"};case U.Type.Utf8:return{sqlType:"utf8"};case U.Type.Struct:return{sqlType:"struct",fields:e.children.map((e=>D(e.name,e.type)))};case U.Type.Map:{let s=e;return{sqlType:"map",keyType:f(s.keyType),valueType:f(s.valueType)}}case U.Type.Time:return{sqlType:"time[s]"};case U.Type.TimeMicrosecond:return{sqlType:"time[us]"};case U.Type.TimeMillisecond:return{sqlType:"time[ms]"};case U.Type.TimeNanosecond:return{sqlType:"time[ns]"};case U.Type.TimeSecond:return{sqlType:"time[s]"};case U.Type.Timestamp:return{sqlType:"timestamp",timezone:e.timezone||void 0};case U.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:e.timezone||void 0};case U.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:e.timezone||void 0};case U.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:e.timezone||void 0};case U.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:e.timezone||void 0}}throw new Error(`unsupported arrow type: ${e.toString()}`)}function D(e,s){let t=f(s);return t.name=e,t}var v=new TextEncoder,M=class{constructor(e,s=null){this._onInstantiationProgress=[],this._worker=null,this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{},this._nextMessageId=0,this._pendingRequests=new Map,this._logger=e,this._onMessageHandler=this.onMessage.bind(this),this._onErrorHandler=this.onError.bind(this),this._onCloseHandler=this.onClose.bind(this),null!=s&&this.attach(s)}get logger(){return this._logger}attach(e){this._worker=e,this._worker.addEventListener("message",this._onMessageHandler),this._worker.addEventListener("error",this._onErrorHandler),this._worker.addEventListener("close",this._onCloseHandler),this._workerShutdownPromise=new Promise(((e,s)=>{this._workerShutdownResolver=e}))}detach(){!this._worker||(this._worker.removeEventListener("message",this._onMessageHandler),this._worker.removeEventListener("error",this._onErrorHandler),this._worker.removeEventListener("close",this._onCloseHandler),this._worker=null,this._workerShutdownResolver(null),this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async terminate(){!this._worker||(this._worker.terminate(),this._worker=null,this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async postTask(e,s=[]){if(!this._worker)return void console.error("cannot send a message since the worker is not set!");let t=this._nextMessageId++;return this._pendingRequests.set(t,e),this._worker.postMessage({messageId:t,type:e.type,data:e.data},s),await e.promise}onMessage(e){let s=e.data;switch(s.type){case"LOG":return void this._logger.log(s.data);case"INSTANTIATE_PROGRESS":for(let e of this._onInstantiationProgress)e(s.data);return}let t=this._pendingRequests.get(s.requestId);if(t){if(this._pendingRequests.delete(s.requestId),"ERROR"==s.type){let e=new Error(s.data.message);return e.name=s.data.name,e.stack=s.data.stack,void t.promiseRejecter(e)}switch(t.type){case"CLOSE_PREPARED":case"COLLECT_FILE_STATISTICS":case"COPY_FILE_TO_PATH":case"DISCONNECT":case"DROP_FILE":case"DROP_FILES":case"FLUSH_FILES":case"INSERT_ARROW_FROM_IPC_STREAM":case"IMPORT_CSV_FROM_PATH":case"IMPORT_JSON_FROM_PATH":case"OPEN":case"PING":case"REGISTER_FILE_BUFFER":case"REGISTER_FILE_HANDLE":case"REGISTER_FILE_URL":case"RESET":if("OK"==s.type)return void t.promiseResolver(s.data);break;case"INSTANTIATE":if(this._onInstantiationProgress=[],"OK"==s.type)return void t.promiseResolver(s.data);break;case"GLOB_FILE_INFOS":if("FILE_INFOS"==s.type)return void t.promiseResolver(s.data);break;case"GET_VERSION":if("VERSION_STRING"==s.type)return void t.promiseResolver(s.data);break;case"GET_FEATURE_FLAGS":if("FEATURE_FLAGS"==s.type)return void t.promiseResolver(s.data);break;case"GET_TABLE_NAMES":if("TABLE_NAMES"==s.type)return void t.promiseResolver(s.data);break;case"TOKENIZE":if("SCRIPT_TOKENS"==s.type)return void t.promiseResolver(s.data);break;case"COPY_FILE_TO_BUFFER":if("FILE_BUFFER"==s.type)return void t.promiseResolver(s.data);break;case"EXPORT_FILE_STATISTICS":if("FILE_STATISTICS"==s.type)return void t.promiseResolver(s.data);break;case"CONNECT":if("CONNECTION_INFO"==s.type)return void t.promiseResolver(s.data);break;case"RUN_PREPARED":case"RUN_QUERY":if("QUERY_RESULT"==s.type)return void t.promiseResolver(s.data);break;case"SEND_PREPARED":if("QUERY_RESULT_HEADER"==s.type)return void t.promiseResolver(s.data);break;case"START_PENDING_QUERY":case"POLL_PENDING_QUERY":if("QUERY_RESULT_HEADER_OR_NULL"==s.type)return void t.promiseResolver(s.data);break;case"CANCEL_PENDING_QUERY":if(this._onInstantiationProgress=[],"SUCCESS"==s.type)return void t.promiseResolver(s.data);break;case"FETCH_QUERY_RESULTS":if("QUERY_RESULT_CHUNK"==s.type)return void t.promiseResolver(s.data);break;case"CREATE_PREPARED":if("PREPARED_STATEMENT_ID"==s.type)return void t.promiseResolver(s.data)}t.promiseRejecter(new Error(`unexpected response type: ${s.type.toString()}`))}else console.warn(`unassociated response: [${s.requestId}, ${s.type.toString()}]`)}onError(e){console.error(e),console.error(`error in duckdb worker: ${e.message}`),this._pendingRequests.clear()}onClose(){this._workerShutdownResolver(null),0==this._pendingRequests.size?this._pendingRequests.clear():console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`)}async reset(){let e=new C("RESET",null);return await this.postTask(e)}async ping(){let e=new C("PING",null);await this.postTask(e)}async dropFile(e){let s=new C("DROP_FILE",e);return await this.postTask(s)}async dropFiles(){let e=new C("DROP_FILES",null);return await this.postTask(e)}async flushFiles(){let e=new C("FLUSH_FILES",null);return await this.postTask(e)}async instantiate(e,s=null,t=(e=>{})){this._onInstantiationProgress.push(t);let a=new C("INSTANTIATE",[e,s]);return await this.postTask(a)}async getVersion(){let e=new C("GET_VERSION",null);return await this.postTask(e)}async getFeatureFlags(){let e=new C("GET_FEATURE_FLAGS",null);return await this.postTask(e)}async open(e){let s=new C("OPEN",e);await this.postTask(s)}async tokenize(e){let s=new C("TOKENIZE",e);return await this.postTask(s)}async connectInternal(){let e=new C("CONNECT",null);return await this.postTask(e)}async connect(){let e=await this.connectInternal();return new O(this,e)}async disconnect(e){let s=new C("DISCONNECT",e);await this.postTask(s)}async runQuery(e,s){let t=new C("RUN_QUERY",[e,s]);return await this.postTask(t)}async startPendingQuery(e,s){let t=new C("START_PENDING_QUERY",[e,s]);return await this.postTask(t)}async pollPendingQuery(e){let s=new C("POLL_PENDING_QUERY",e);return await this.postTask(s)}async cancelPendingQuery(e){let s=new C("CANCEL_PENDING_QUERY",e);return await this.postTask(s)}async fetchQueryResults(e){let s=new C("FETCH_QUERY_RESULTS",e);return await this.postTask(s)}async getTableNames(e,s){let t=new C("GET_TABLE_NAMES",[e,s]);return await this.postTask(t)}async createPrepared(e,s){let t=new C("CREATE_PREPARED",[e,s]);return await this.postTask(t)}async closePrepared(e,s){let t=new C("CLOSE_PREPARED",[e,s]);await this.postTask(t)}async runPrepared(e,s,t){let a=new C("RUN_PREPARED",[e,s,t]);return await this.postTask(a)}async sendPrepared(e,s,t){let a=new C("SEND_PREPARED",[e,s,t]);return await this.postTask(a)}async globFiles(e){let s=new C("GLOB_FILE_INFOS",e);return await this.postTask(s)}async registerFileText(e,s){let t=v.encode(s);await this.registerFileBuffer(e,t)}async registerFileURL(e,s,t,a){void 0===s&&(s=e);let r=new C("REGISTER_FILE_URL",[e,s,t,a]);await this.postTask(r)}async registerEmptyFileBuffer(e){let s=new C("REGISTER_FILE_BUFFER",[e,new Uint8Array]);await this.postTask(s)}async registerFileBuffer(e,s){let t=new C("REGISTER_FILE_BUFFER",[e,s]);await this.postTask(t,[s.buffer])}async registerFileHandle(e,s,t,a){let r=new C("REGISTER_FILE_HANDLE",[e,s,t,a]);await this.postTask(r,[])}async collectFileStatistics(e,s){let t=new C("COLLECT_FILE_STATISTICS",[e,s]);await this.postTask(t,[])}async exportFileStatistics(e){let s=new C("EXPORT_FILE_STATISTICS",e);return await this.postTask(s,[])}async copyFileToBuffer(e){let s=new C("COPY_FILE_TO_BUFFER",e);return await this.postTask(s)}async copyFileToPath(e,s){let t=new C("COPY_FILE_TO_PATH",[e,s]);await this.postTask(t)}async insertArrowFromIPCStream(e,s,t){if(0==s.length)return;let a=new C("INSERT_ARROW_FROM_IPC_STREAM",[e,s,t]);await this.postTask(a,[s.buffer])}async insertCSVFromPath(e,s,t){if(void 0!==t.columns){let e=[];for(let s in t.columns){let a=t.columns[s];e.push(D(s,a))}t.columnsFlat=e,delete t.columns}let a=new C("IMPORT_CSV_FROM_PATH",[e,s,t]);await this.postTask(a)}async insertJSONFromPath(e,s,t){if(void 0!==t.columns){let e=[];for(let s in t.columns){let a=t.columns[s];e.push(D(s,a))}t.columnsFlat=e,delete t.columns}let a=new C("IMPORT_JSON_FROM_PATH",[e,s,t]);await this.postTask(a)}},G=class{constructor(){this._bindings=null,this._nextMessageId=0}log(e){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:e},[])}sendOK(e){this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"OK",data:null},[])}failWith(e,s){let t={name:s.name,message:s.message,stack:s.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"ERROR",data:t},[])}async onMessage(e){switch(e.type){case"PING":return void this.sendOK(e);case"INSTANTIATE":null!=this._bindings&&this.failWith(e,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(e.data[0],e.data[1],(s=>{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"INSTANTIATE_PROGRESS",data:s},[])})),this.sendOK(e)}catch(s){this._bindings=null,this.failWith(e,s)}return}if(!this._bindings)return this.failWith(e,new Error("duckdb is not initialized"));try{switch(e.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(e);break;case"OPEN":this._bindings.open(e.data),this.sendOK(e);break;case"DROP_FILE":this._bindings.dropFile(e.data),this.sendOK(e);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(e);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(e);break;case"CONNECT":{let s=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"CONNECTION_INFO",data:s.useUnsafe(((e,s)=>s))},[]);break}case"DISCONNECT":this._bindings.disconnect(e.data),this.sendOK(e);break;case"CREATE_PREPARED":{let s=this._bindings.createPrepared(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"PREPARED_STATEMENT_ID",data:s},[]);break}case"CLOSE_PREPARED":this._bindings.closePrepared(e.data[0],e.data[1]),this.sendOK(e);break;case"RUN_PREPARED":{let s=this._bindings.runPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:s},[s.buffer]);break}case"RUN_QUERY":{let s=this._bindings.runQuery(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:s},[s.buffer]);break}case"SEND_PREPARED":{let s=this._bindings.sendPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER",data:s},[s.buffer]);break}case"START_PENDING_QUERY":{let s=this._bindings.startPendingQuery(e.data[0],e.data[1]),t=[];s&&t.push(s.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:s},t);break}case"POLL_PENDING_QUERY":{let s=this._bindings.pollPendingQuery(e.data),t=[];s&&t.push(s.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:s},t);break}case"CANCEL_PENDING_QUERY":{let s=this._bindings.cancelPendingQuery(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SUCCESS",data:s},[]);break}case"FETCH_QUERY_RESULTS":{let s=this._bindings.fetchQueryResults(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_CHUNK",data:s},[s.buffer]);break}case"GET_TABLE_NAMES":{let s=this._bindings.getTableNames(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"TABLE_NAMES",data:s},[]);break}case"GLOB_FILE_INFOS":{let s=this._bindings.globFiles(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_INFOS",data:s},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(e.data[0],e.data[1]),this.sendOK(e);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(e.data[0],e.data[1]),this.sendOK(e);break;case"COPY_FILE_TO_BUFFER":{let s=this._bindings.copyFileToBuffer(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_BUFFER",data:s},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(e.data[0],e.data[1]),this.sendOK(e);break;case"EXPORT_FILE_STATISTICS":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(e.data)},[]);break;case"INSERT_ARROW_FROM_IPC_STREAM":this._bindings.insertArrowFromIPCStream(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break;case"IMPORT_CSV_FROM_PATH":this._bindings.insertCSVFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break;case"IMPORT_JSON_FROM_PATH":this._bindings.insertJSONFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break;case"TOKENIZE":{let s=this._bindings.tokenize(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SCRIPT_TOKENS",data:s},[]);break}}}catch(s){return this.failWith(e,s)}}},j=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),q=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),B=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),Q=()=>(async e=>{try{return typeof MessageChannel<"u"&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),Y={name:"@duckdb/duckdb-wasm",version:"1.26.0",description:"DuckDB powered by WebAssembly",license:"MIT",repository:{type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},keywords:["sql","duckdb","relational","database","data","query","wasm","analytics","olap","arrow","parquet","json","csv"],dependencies:{"apache-arrow":"^11.0.0"},devDependencies:{"@types/emscripten":"^1.39.6","@types/jasmine":"^4.3.1","@typescript-eslint/eslint-plugin":"^5.53.0","@typescript-eslint/parser":"^5.49.0",esbuild:"^0.15.12",eslint:"^8.35.0","eslint-plugin-jasmine":"^4.1.3","eslint-plugin-react":"^7.32.2","fast-glob":"^3.2.12",jasmine:"^4.5.0","jasmine-core":"^5.0.0","jasmine-spec-reporter":"^7.0.0","js-sha256":"^0.9.0",karma:"^6.4.2","karma-chrome-launcher":"^3.1.1","karma-coverage":"^2.2.0","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^5.1.0","karma-jasmine-html-reporter":"^2.0.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.36","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.8.4",puppeteer:"^19.10.0",rimraf:"^4.3.0",s3rver:"^3.7.1",typedoc:"^0.23.27",typescript:"^4.8.4","wasm-feature-detect":"^1.5.1","web-worker":"^1.2.0"},scripts:{"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:debug":"node --inspect-brk --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:coverage":"nyc -r json --report-dir ./coverage/node node --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},files:["dist","!dist/types/test"],main:"dist/duckdb-browser.cjs",module:"dist/duckdb-browser.mjs",types:"dist/duckdb-browser.d.ts",jsdelivr:"dist/duckdb-browser.cjs",unpkg:"dist/duckdb-browser.mjs",sideEffects:!1,browser:{fs:!1,path:!1,perf_hooks:!1,os:!1,worker_threads:!1},exports:{"./dist/duckdb-mvp.wasm":"./dist/duckdb-mvp.wasm","./dist/duckdb-eh.wasm":"./dist/duckdb-eh.wasm","./dist/duckdb-coi.wasm":"./dist/duckdb-coi.wasm","./dist/duckdb-browser":"./dist/duckdb-browser.mjs","./dist/duckdb-browser.cjs":"./dist/duckdb-browser.cjs","./dist/duckdb-browser.mjs":"./dist/duckdb-browser.mjs","./dist/duckdb-browser-blocking":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.mjs":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.cjs":"./dist/duckdb-browser-blocking.cjs","./dist/duckdb-browser-coi.pthread.worker.js":"./dist/duckdb-browser-coi.pthread.worker.js","./dist/duckdb-browser-coi.worker.js":"./dist/duckdb-browser-coi.worker.js","./dist/duckdb-browser-eh.worker.js":"./dist/duckdb-browser-eh.worker.js","./dist/duckdb-browser-mvp.worker.js":"./dist/duckdb-browser-mvp.worker.js","./dist/duckdb-node":"./dist/duckdb-node.cjs","./dist/duckdb-node.cjs":"./dist/duckdb-node.cjs","./dist/duckdb-node-blocking":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-blocking.cjs":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-eh.worker.cjs":"./dist/duckdb-node-eh.worker.cjs","./dist/duckdb-node-mvp.worker.cjs":"./dist/duckdb-node-mvp.worker.cjs","./blocking":{browser:{types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},node:{types:"./dist/duckdb-node-blocking.d.ts",require:"./dist/duckdb-node-blocking.cjs",import:"./dist/duckdb-node-blocking.cjs"},types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},".":{browser:{types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"},node:{types:"./dist/duckdb-node.d.ts",import:"./dist/duckdb-node.cjs",require:"./dist/duckdb-node.cjs"},types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"}}},H=Y.name,K=Y.version,W=Y.version.split("."),x=W[0],V=W[1],z=W[2],$=()=>typeof navigator>"u",J=()=>$()?"node":navigator.userAgent,Z=()=>J().includes("Firefox"),X=()=>/^((?!chrome|android).)*safari/i.test(J());function ee(){let e=`https://cdn.jsdelivr.net/npm/${H}@${K}/dist/`;return{mvp:{mainModule:`${e}duckdb-mvp.wasm`,mainWorker:`${e}duckdb-browser-mvp.worker.js`},eh:{mainModule:`${e}duckdb-eh.wasm`,mainWorker:`${e}duckdb-browser-eh.worker.js`}}}var se=null,te=null,ae=null,re=null,ie=null;async function ne(){return null==se&&(se=typeof BigInt64Array<"u"),null==te&&(te=await q()),null==ae&&(ae=await Q()),null==re&&(re=await B()),null==ie&&(ie=await j()),{bigInt64Array:se,crossOriginIsolated:$()||globalThis.crossOriginIsolated||!1,wasmExceptions:te,wasmSIMD:re,wasmThreads:ae,wasmBulkMemory:ie}}async function de(e){let s=await ne();if(s.wasmExceptions){if(s.wasmSIMD&&s.wasmThreads&&s.crossOriginIsolated&&e.coi)return{mainModule:e.coi.mainModule,mainWorker:e.coi.mainWorker,pthreadWorker:e.coi.pthreadWorker};if(e.eh)return{mainModule:e.eh.mainModule,mainWorker:e.eh.mainWorker,pthreadWorker:null}}return{mainModule:e.mvp.mainModule,mainWorker:e.mvp.mainWorker,pthreadWorker:null}}var oe=((e,s,t)=>(t=null!=e?i(c(e)):{},((e,s,t,a)=>{if(s&&"object"==typeof s||"function"==typeof s)for(let t of o(s))!E.call(e,t)&&undefined!==t&&n(e,t,{get:()=>s[t],enumerable:!(a=d(s,t))||a.enumerable});return e})(e&&e.__esModule?t:n(t,"default",{value:e,enumerable:!0}),e)))(l());async function ce(e){let s=new Request(e),t=await fetch(s),a=URL.createObjectURL(await t.blob());return new oe.default(a)}new TextDecoder;var Ee=(e=>(e[e.BUFFER=0]="BUFFER",e[e.NODE_FS=1]="NODE_FS",e[e.BROWSER_FILEREADER=2]="BROWSER_FILEREADER",e[e.BROWSER_FSACCESS=3]="BROWSER_FSACCESS",e[e.HTTP=4]="HTTP",e[e.S3=5]="S3",e))(Ee||{});export{M as AsyncDuckDB,O as AsyncDuckDBConnection,G as AsyncDuckDBDispatcher,A as AsyncPreparedStatement,F as AsyncResultStreamIterator,I as ConsoleLogger,_ as DuckDBAccessMode,Ee as DuckDBDataProtocol,R as LogEvent,u as LogLevel,p as LogOrigin,T as LogTopic,H as PACKAGE_NAME,K as PACKAGE_VERSION,x as PACKAGE_VERSION_MAJOR,V as PACKAGE_VERSION_MINOR,z as PACKAGE_VERSION_PATCH,y as StatusCode,h as VoidLogger,P as WorkerRequestType,L as WorkerResponseType,C as WorkerTask,ce as createWorker,ee as getJsDelivrBundles,b as getLogEventLabel,m as getLogLevelLabel,g as getLogOriginLabel,S as getLogTopicLabel,ne as getPlatformFeatures,Z as isFirefox,$ as isNode,X as isSafari,de as selectBundle};